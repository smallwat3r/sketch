#!/bin/bash
#         __       __      __
#    ___ / /_____ / /_____/ /
#   (_-</  '_/ -_) __/ __/ _ \
#  /___/_/\_\\__/\__/\__/_//_/
#
# Matthieu Petiteau <mpetiteau.pro@gmail.com>
#
# MIT License
#
# Copyright (c) 2019 Matthieu Petiteau
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e
self=${0##*/}
version="v0.2 (Matthieu Petiteau)"

loadconfig() {
  # Source configs if set up in sketchrc file.
  local conf_dir=(.sketchrc ../.sketchrc $XDG_CONFIG_HOME/.sketchrc
    $HOME/.config/.sketchrc $HOME/.sketchrc)
  for d in "${conf_dir[@]}"; do
    if [ -f $d ]; then
      source $d
      break
    fi
  done
}

loadeditor() {
  # Check first for editor from sketchrc, then user default editor,
  # and finally default to vim.
  sketch_editor=$SKETCH_EDITOR
  if [[ -z $sketch_editor ]]; then
    sketch_editor=$EDITOR
    if [[ -z $sketch_editor ]]; then
      sketch_editor=vim
    fi
  fi
}

loadarchivesdir() {
  # Pick archives dir.
  sketch_archives=$SKETCH_ARCHIVES
  if [[ -z $sketch_archives ]]; then
    if [[ -d $XDG_DATA_HOME ]]; then
      sketch_archives=$XDG_DATA_HOME/sketch_archives
    else
      sketch_archives=$HOME/.local/share/sketch_archives
    fi
  fi
}

init() {
  loadconfig
  loadeditor
  loadarchivesdir

  # Create archives dir if doesn't exist.
  if [ ! -d $sketch_archives ]; then
    mkdir $sketch_archives
  fi
}

showhelp() {
  printf "
      __       __      __
 ___ / /_____ / /_____/ /
(_-</  '_/ -_) __/ __/ _ \'
/___/_/\_\\__/\__/\__/_//_/

Copyright 2020 Matthieu Petiteau, all rights reserved.

$self is a small productivity tool to rapidly generate and
access draft files from the terminal.

$self            automatically creates and open a new draft
                  file from the temporary directory.

$self <number>   open archived saved file. Ex:
                  $self 1 will reopen the last saved file.
                  $self 2 will reopen the previous one
                  etc...

$self ls         list all archived files.

$self purge      delete all the archived files.

Other Arguments
------------------------------------------------------------
-h, --help        show this help message and exit.
-v, --version     script version.
\n"
}

new() {
  local file=$(($(ls $sketch_archives | wc -l) + 1)).sketch
  $sketch_editor $sketch_archives/$file
}

reopen() {
  local av=$(ls $sketch_archives | wc -l)
  if [ $1 -eq "0" ]; then
    printf "Index starts at 1.\n"
    exit 1
  elif [ $av -gt $1 ] || [ $av -eq $1 ]; then
    local file=$sketch_archives/$1.sketch
    if [ -f $file ]; then
      $sketch_editor $file
    else
      printf "It seems that this file has been removed.\n"
      exit 1
    fi
  else
    printf "No file found, try to look at a lower level.\n"
  fi
}

purge() {
  if [ -n "$(ls -A $sketch_archives 2>/dev/null)" ]; then
    rm $sketch_archives/*
    printf "Archived files have been deleted.\n"
  else
    printf "No files to delete.\n"
  fi
}

list() {
  ls -lt -A $sketch_archives | awk '{
    split($9, name, ".");
    if (name[1])
      print "[", name[1], "]", "last edit @", $8, "on", $7, $6;
    }'
}

version() {
  printf "$self $version\n"
}

init
param=$1

if [[ -z $param ]]; then
  new
  exit 0
fi

case $param in
  $(awk '/^[0-9]+$/' <<<${param}))
    reopen "${param}"
    ;;
  "purge")
    purge
    ;;
  "ls")
    list
    ;;
  "-h" | "--help")
    showhelp
    version
    ;;
  "-v" | "--version")
    version
    ;;
  *)
    printf "Command not found.\n"
    exit 127
    ;;
esac
exit 0
